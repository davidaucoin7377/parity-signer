searchState.loadedDescShard("db_handling", 0, "This crate deals with standard database-related procedures …\n<code>AddressDetails</code> for <code>AddressKey</code> in <code>ADDRTREE</code> tree of the …\nDatabase checksum does not match the expected value.\nNetwork <code>CurrentVerifier</code> is <code>ValidCurrentVerifier::Custom(_)</code>…\n<code>DangerRecord</code> information stored in <code>SETTREE</code> tree of the …\nDerivation that user tried to create already exists.\nTemporary database entry in <code>TRANSACTION</code> tree of the Vault …\nNetwork specs entries have same genesis hash, but …\nWhile searching for all networks with same genesis hash, …\nGot empty seed phrase.\nGot empty seed name.\nContains the error value\nDB handling error type.\nGeneral verifier <code>Verifier</code> information stored in <code>SETTREE</code> …\nHistory log <code>Entry</code> stored in <code>HISTORY</code> tree of the Vault …\nReceived <code>derivations</code> update payload contains an invalid …\nSame public key was produced for a different seed phrase …\nSame public key was produced for a different seed phrase …\nUser was creating the derivation with password, and thus …\nNetwork metadata in <code>METATREE</code> tree of the Vault database, …\n<code>NetworkSpecsKey</code> of a network in <code>network_id</code> field of the …\n<code>OrderedNetworkSpecs</code> for a network in <code>SPECSTREE</code> tree of the …\nContains the success value\nQR handling error.\nDB handling result.\nFound <code>secret_exposed</code> flag mismatch in the database: …\nError in <code>SecretString</code>.\nTo generate QR code with public address information …\nTemporary database entry in <code>TRANSACTION</code> tree of the Vault …\nTemporary database entry in <code>TRANSACTION</code> tree of the Vault …\nDatabase has two seed addresses (i.e. with empty …\n<code>DangerRecord</code> information stored in <code>SETTREE</code> tree of the …\nNetwork has no entry for <code>CurrentVerifier</code> under <code>verifier_key</code>…\nUser has entered a wrong password for a passworded address.\nMaking and restoring <strong>cold</strong> database with default content\nAtomic transactions in cold and hot databases\nGenerate or restore “cold” database with default …\nGenerate or restore “hot” database with default values.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCommon helper functions for database operations\nCreating, collecting, and removing addresses in cold …\nUtils to communicate with the Vault frontend\nCalls <code>U::from(self)</code>.\nDisplaying and updating history log\naddress key for which the export is done\nencryption algorithm for which two seed keys were found\nseed name, from the navigator\nnetwork name\nseed name, from the <code>AddressDetails</code>\nseed name\nnetwork version\nInitiate cold database and set up the database general …\nGenerate database with networks specs both for substrate …\nGenerate initiated test cold database with default …\nGenerate <strong>not initiated</strong> test cold database for <code>navigator</code> …\nGenerate <strong>not initiated</strong> test cold database for <code>navigator</code> …\nGenerate initiated test cold database without network …\nGenerate initiated test cold database with no …\nInitiate Vault database with general verifier set up to …\nInitiate Vault database with default general verifier …\n<code>53xx03</code> text message\nSignable transaction content\nCold database transaction data containing <code>Batch</code> elements …\nTemporary storage for signable transaction and associated …\nDraft for cold database atomic transaction, constructed …\nHot database transaction data containing <code>Batch</code> elements …\n<code>53xx00</code> or <code>53xx02</code> transaction\nPrepare adding the metadata received as <code>load_metadata</code> …\nPrepare adding <code>OrderedNetworkSpecs</code> into the cold database:\nPrepare adding types information <code>ContentLoadTypes</code> received …\nApply constructed set of batches within <code>TrDbCold</code> to the …\nApply constructed set of batches within <code>TrDbHot</code> to the …\nTransform <code>TrDbColdStub</code> into <code>TrDbCold</code> and apply to the …\nUse <code>TrDbColdSign</code> to add history log data into the cold …\nGet transaction content.\nDefault value for <code>TrDbCold</code>. Empty.\nDefault value for <code>TrDbHot</code>. Empty.\nDefault value for <code>TrDbColdStub</code>. Empty.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRecover <code>TrDbColdStub</code> from storage in the cold database.\nRecover <code>TrDbColdSign</code> from storage in the cold database.\nConstruct <code>TrDbColdSign</code> from components.\nGet <code>has_pwd</code> flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet <code>MultiSigner</code> value\nConstruct new empty <code>TrDbCold</code>.\nConstruct new empty <code>TrDbHot</code>.\nConstruct new empty <code>TrDbColdStub</code>.\nPrepare adding new general verifier <code>Verifier</code> into the cold …\nAdd new <code>Event</code> in <code>history_stub</code> field of the <code>TrDbColdStub</code>\nPrepare adding new network verifier <code>ValidCurrentVerifier</code> …\nGet derivation path.\nPrepare removing the metadata from the cold database:\nPrepare removing <code>OrderedNetworkSpecs</code> from the cold …\nPrepare removing types information from the cold database:\nSet <code>for_address_book</code> field in <code>TrDbHot</code> with <code>Batch</code> that will …\nSet <code>for_addresses</code> field in <code>TrDbCold</code> with <code>Batch</code> that will be\nSet <code>for_history</code> field in <code>TrDbCold</code> with <code>Batch</code> that will be …\nSet <code>for_meta_history</code> field in <code>TrDbHot</code> with <code>Batch</code> that will …\nSet <code>for_metadata</code> field in <code>TrDbCold</code> with <code>Batch</code> that will be …\nSet <code>for_metadata</code> field in <code>TrDbHot</code> with <code>Batch</code> that will be …\nSet <code>for_network_specs</code> field in <code>TrDbCold</code> with <code>Batch</code> that …\nSet <code>for_network_specs_prep</code> field in <code>TrDbHot</code> with <code>Batch</code> that\nSet <code>for_settings</code> field in <code>TrDbCold</code> with <code>Batch</code> that will be …\nSet <code>for_settings</code> field in <code>TrDbHot</code> with <code>Batch</code> that will be …\nSet <code>for_transaction</code> field in <code>TrDbCold</code> with <code>Batch</code> that will …\nSet <code>for_verifiers</code> field in <code>TrDbCold</code> with <code>Batch</code> that will be\nBulk of transactions to sign.\nPut SCALE-encoded <code>TrDbColdStub</code> into storage in the …\nPut SCALE-encoded <code>TrDbColdSign</code> into storage in the …\nextensions as raw data\nmethod as raw data\nSpecs invariants that are expected to stay unchanged for …\nCheck database schema version. Prevents app stash when …\nnetwork with lowest order, for correct navigation when …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSearch for network genesis hash in <code>OrderedNetworkSpecs</code> …\nGet <code>AddressDetails</code> from the Vault database, using …\nGet <code>OrderedNetworkSpecs</code> for all networks from the cold …\nGet the danger status from the Vault database.\nGet general verifier <code>Verifier</code> from the Vault database.\nGet <code>MetaValues</code>, corresponding to given network name and …\nGet network specs <code>OrderedNetworkSpecs</code> from the Vault …\nGet types information as <code>Vec&lt;TypeEntry&gt;</code> from the database.\nGet <code>ValidCurrentVerifier</code> from the Vault database for a …\nCalls <code>U::from(self)</code>.\nAssemble a <code>Batch</code> that removes all elements from a tree.\nOpen a tree in the database.\nGet types information as <code>ContentLoadTypes</code> from the …\nRemove the network metadata entry from the database.\nRemove the network from the database.\nUser-initiated removal of the types information from the …\nTransfer metadata from the hot database into the cold one.\nTry to get <code>AddressDetails</code> from the Vault database, using …\nTry to get <code>AddressDetails</code> from the Vault database, …\nTry to get <code>MetaValues</code>, corresponding to given network name …\nTry to get network specs <code>OrderedNetworkSpecs</code> from the …\nTry to get types information from the database.\nTry to get <code>ValidCurrentVerifier</code> from the Vault database …\nDerivation has bad format, UI disables proceeding with …\nProposed derivation status.\nDerivation has no password.\nDerivation has password (<code>///&lt;password&gt;</code> part).\nAddress in the network.\nCheck derivations before offering user to import them.\nAdd a set of new derived addresses: N+1, N+2, etc into …\nCreates seed into Vault: add default addresses for …\nSeparate derivation path with password into non-secret …\nPreliminary checks if the user-proposed derivation could …\nThe derivation path of the key if user provided one\nHelper function to get public key from seed phrase and …\nDerived keys.\nPrepare <code>DynamicDerivationsAddressResponse</code> for the given …\nThe type of encryption in the network\nExport info about keys and their addresses known to Vault\nPrepare <strong>secret</strong> key export screen struct <code>MKeyDetails</code>.\nReturn address details that corresponds to a public key. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate random phrase with given number of words.\nGenerate test Alice addresses in test cold database.\nGenesis hash\nGet all existing addresses for a given seed name from the …\nGet all existing addresses from the database.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck derivation format and determine if it has a password.\nPublic key of the root key.\nName of the seed.\nRemove address from the Vault database.\nRemove a set of addresses within a single network from the …\nRemove all addresses associated with given seed name from …\nCreate a new address in the Vault database.\nAccept seed into Vault: add default addresses for a seed …\nMaximum word count in <code>bip39</code> standard.\nZeroizeable seed phrase draft.\nMaximum word length in <code>bip39</code> standard.\nUser tries to add the word to the <code>saved</code> field of the …\nGet address-associated public data for all addresses from …\nPrepare seed backup screen struct <code>MBackup</code> for given seed …\nPrepare key derivation screen struct <code>MDeriveKey</code>.\nMake a <code>String</code> with a seed phrase draft.\nReturn <code>NavDerivationCheck</code> with allowed action details for …\nPrepare export key screen struct <code>MKeyDetails</code>.\nSort database networks by the order and get the network …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn a <code>Vec</code> with all seed names with seed key identicons …\nGet possible options of English <code>bip39</code> words that start …\nGet database history tree checksum to be displayed in log …\nStart new <code>SeedDraft</code>\nCalls <code>U::from(self)</code>.\nReturn <code>MManageMetadata</code> with metadata details for network …\nReturn <code>MNetworkDetails</code> with network specs and metadata set …\nReturn a <code>Vec</code> with address-associated public data for all …\nGenerate new random seed phrase, make identicon for <code>sr25519</code>…\nClear transaction tree of the database.\nRemove word at given position from the saved seed phrase …\nRemove last word from the saved seed phrase draft.\nMake <code>Vec</code> with network information for all networks in the …\nReturn <code>Vec</code> with network information for all networks in …\nMake types status display.\nModify <code>SeedDraft</code> with updated <code>user_text</code> from the frontend.\nCombines all draft elements into seed phrase proposal, and …\nOutput the user input back into user interface.\nClear Vault history and make a log <code>Entry</code> that history was …\nProcess the fact that the Vault device was online.\nEnter <code>Event</code> set into the database as a single database …\nTimestamp <code>Event</code> set and make with it a new <code>Batch</code>, that …\nGet history log contents from the database.\nGet from the database a history log <code>Entry</code> by <code>u32</code> order …\nEnter system-generated <code>Event</code> into the database.\nEnter user-generated <code>Event</code> into the database.\nPrint total number of pages, for maximum <code>HISTORY_PAGE_SIZE</code> …\nAcknowledge that the Vault device was online and reset the …\nRecord in history log that certain seed was shown on Vault …")